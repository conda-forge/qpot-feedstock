diff --git a/CMakeLists.txt b/CMakeLists.txt
index 63d992d..5129af4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -14,6 +14,11 @@ option(USE_ASSERT "${PROJECT_NAME}: Build with assertions" ON)
 option(USE_DEBUG "${PROJECT_NAME}: Build in debug mode" OFF)
 option(USE_SIMD "${PROJECT_NAME}: Build with hardware optimization" OFF)
 
+if(SKBUILD)
+    message(STATUS "scikit-build: enabling BUILD_PYTHON")
+    set(BUILD_PYTHON 1)
+endif()
+
 if (DEFINED ENV{SETUPTOOLS_SCM_PRETEND_VERSION})
     set(PROJECT_VERSION $ENV{SETUPTOOLS_SCM_PRETEND_VERSION})
     message(STATUS "Building ${PROJECT_NAME} ${PROJECT_VERSION} (read from SETUPTOOLS_SCM_PRETEND_VERSION)")
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 0000000..91a1d5c
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,2 @@
+[build-system]
+requires = ["setuptools", "wheel", "scikit-build", "cmake", "ninja", "setuptools_scm"]
diff --git a/setup.py b/setup.py
index a46f388..5d67348 100644
--- a/setup.py
+++ b/setup.py
@@ -3,118 +3,13 @@ import re
 import sys
 import subprocess
 
-from setuptools import setup, Extension
-from setuptools.command.build_ext import build_ext
-
+from skbuild import setup
 from setuptools_scm import get_version
 
-# ==================================================================
-# Tools to build/install by controlling CMakeLists.txt from setup.py
-# (c) Dean Moldovan
-#     https://github.com/pybind/cmake_example/blob/master/setup.py
-# ==================================================================
-
-# Convert distutils Windows platform specifiers to CMake -A arguments
-PLAT_TO_CMAKE = {
-    "win32": "Win32",
-    "win-amd64": "x64",
-    "win-arm32": "ARM",
-    "win-arm64": "ARM64",
-}
-
-# A CMakeExtension needs a sourcedir instead of a file list.
-# The name must be the _single_ output extension from the CMake build.
-# If you need multiple extensions, see scikit-build.
-class CMakeExtension(Extension):
-    def __init__(self, name, sourcedir=""):
-        Extension.__init__(self, name, sources=[])
-        self.sourcedir = os.path.abspath(sourcedir)
-
-
-class CMakeBuild(build_ext):
-    def build_extension(self, ext):
-        extdir = os.path.abspath(os.path.dirname(self.get_ext_fullpath(ext.name)))
-
-        # required for auto-detection of auxiliary "native" libs
-        if not extdir.endswith(os.path.sep):
-            extdir += os.path.sep
-
-        cfg = "Debug" if self.debug else "Release"
-
-        # CMake lets you override the generator - we need to check this.
-        # Can be set with Conda-Build, for example.
-        cmake_generator = os.environ.get("CMAKE_GENERATOR", "")
-
-        # Set Python_EXECUTABLE instead if you use PYBIND11_FINDPYTHON
-        cmake_args = [
-            "-DBUILD_PYTHON=1",
-            "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY={}".format(extdir),
-            "-DPython_EXECUTABLE={}".format(sys.executable),
-            "-DCMAKE_BUILD_TYPE={}".format(cfg),  # not used on MSVC, but no harm
-        ]
-        build_args = []
-
-        if self.compiler.compiler_type != "msvc":
-            # Using Ninja-build since it a) is available as a wheel and b)
-            # multithreads automatically. MSVC would require all variables be
-            # exported for Ninja to pick it up, which is a little tricky to do.
-            # Users can override the generator with CMAKE_GENERATOR in CMake
-            # 3.15+.
-            if not cmake_generator:
-                cmake_args += ["-GNinja"]
-
-        else:
-
-            # Single config generators are handled "normally"
-            single_config = any(x in cmake_generator for x in {"NMake", "Ninja"})
-
-            # CMake allows an arch-in-generator style for backward compatibility
-            contains_arch = any(x in cmake_generator for x in {"ARM", "Win64"})
-
-            # Specify the arch if using MSVC generator, but only if it doesn't
-            # contain a backward-compatibility arch spec already in the
-            # generator name.
-            if not single_config and not contains_arch:
-                cmake_args += ["-A", PLAT_TO_CMAKE[self.plat_name]]
-
-            # Multi-config generators have a different way to specify configs
-            if not single_config:
-                cmake_args += [
-                    "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_{}={}".format(cfg.upper(), extdir)
-                ]
-                build_args += ["--config", cfg]
-
-        if sys.platform.startswith("darwin"):
-            # Cross-compile support for macOS - respect ARCHFLAGS if set
-            archs = re.findall(r"-arch (\S+)", os.environ.get("ARCHFLAGS", ""))
-            if archs:
-                cmake_args += ["-DCMAKE_OSX_ARCHITECTURES={}".format(";".join(archs))]
-
-        if "CMAKE_ARGS" in os.environ:
-            cmake_args += os.environ["CMAKE_ARGS"].split(" ")
-
-        # Set CMAKE_BUILD_PARALLEL_LEVEL to control the parallel build level
-        # across all generators.
-        if "CMAKE_BUILD_PARALLEL_LEVEL" not in os.environ:
-            # self.parallel is a Python 3 only way to set parallel jobs by hand
-            # using -j in the build_ext call, not supported by pip or PyPA-build.
-            if hasattr(self, "parallel") and self.parallel:
-                # CMake 3.12+ only.
-                build_args += ["-j{}".format(self.parallel)]
-
-        if not os.path.exists(self.build_temp):
-            os.makedirs(self.build_temp)
-
-        subprocess.check_call(
-            ["cmake", ext.sourcedir] + cmake_args, cwd=self.build_temp
-        )
-        subprocess.check_call(
-            ["cmake", "--build", "."] + build_args, cwd=self.build_temp
-        )
+cmake_args = []
 
-# ==================================================================
-# Actual setup
-# ==================================================================
+if "CMAKE_ARGS" in os.environ:
+    cmake_args += os.environ["CMAKE_ARGS"].split(" ")
 
 setup(
     name = 'QPot',
@@ -126,7 +21,6 @@ setup(
     author_email = 'tom@geus.me',
     url = 'https://github.com/tdegeus/QPot',
     setup_requires = ['setuptools_scm'],
-    ext_modules = [CMakeExtension("QPot")],
-    cmdclass = {"build_ext": CMakeBuild},
+    cmake_args = cmake_args,
     zip_safe = False,
 )
